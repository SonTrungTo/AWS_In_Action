---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS in Action: chapter 06 (VPC)'
Parameters:
  KeyPair:
    Description: 'Key pair for VPC'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: mykey
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: 'AWS in Action: chapter 06 (VPC)'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetPublicBastionHost:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'us-east-1a'
      CidrBlock: '10.0.1.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public Bastion Host'
  RouteTablePublicBastionHost:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicBastionHost:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicBastionHost
      RouteTableId: !Ref RouteTablePublicBastionHost
  RoutePublicBastionHostToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicBastionHost
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAclPublicBastionHost:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicBastionHost:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicBastionHost
      NetworkAclId: !Ref NetworkAclPublicBastionHost
  NetworkAclEntryInPublicBastionHostSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicBastionHostEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicBastionHostSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryInPublicBastionHostEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '10.0.0.0/16'
  SubnetPublicVarnishProxy:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'us-east-1a'
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      Tags:
      - Key: Name
        Value: 'Public Varnish Proxy'
  RouteTablePublicVarnishProxy:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicVarnishProxy:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablePublicVarnishProxy
      SubnetId: !Ref SubnetPublicVarnishProxy
  RoutePublicVarnishProxyToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicVarnishProxy
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAclPublicVarnishProxy:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicVarnishProxy:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicVarnishProxy
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
  NetworkAclEntryInPublicVarnishProxySSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '10.0.1.0/24'
  NetworkAclEntryOutPublicVarnishProxyEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPublicVarnishProxyHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicVarnishProxyHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPublicVarnishProxyEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicVarnishProxyHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  SubnetPrivateApacheWebserver:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'us-east-1a'
      CidrBlock: '10.0.3.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Private Apache Webserver'
  RouteTablePrivateApacheWebserver:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationApacheWebserver:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivateApacheWebserver
      RouteTableId: !Ref RouteTablePrivateApacheWebserver
  RoutePrivateApacheWebserverToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivateApacheWebserver
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway
  NetworkAclPrivateApacheWebserver:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPrivateApacheWebserver:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivateApacheWebserver
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
  NetworkAclEntryInPrivateApacheWebserverSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '10.0.1.0/24'
  NetworkAclEntryInPrivateApacheWebserverHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '10.0.2.0/24'
  NetworkAclEntryInPrivateApacheWebserverEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateApacheWebserverEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryOutPrivateApacheWebserverHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateApacheWebserverHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  EIPNatGateway:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: 'vpc'
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIPNatGateway.AllocationId'
      SubnetId: !Ref SubnetPublicNAT
  SubnetPublicNAT:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'us-east-1a'
      VpcId: !Ref VPC
      CidrBlock: '10.0.0.0/24'
      Tags:
      - Key: Name
        Value: 'Public NAT'
  RouteTablePublicNAT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicNAT:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicNAT
      RouteTableId: !Ref RouteTablePublicNAT
  RoutePublicNATToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicNAT
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAclPublicNAT:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicNAT:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      SubnetId: !Ref SubnetPublicNAT
  NetworkAclEntryInPublicNATHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryInPublicNATHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryInEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicNATHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicNATHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow incoming and outgoing traffic.'
      VpcId: !Ref VPC
      